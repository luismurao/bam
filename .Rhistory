which(pkgs_curso=="sp")
pkgs_curso[which(pkgs_curso=="sp")]
installed.packages()
pkgs_curso
# Algoritmo que revisa que paquetes ya estan instalados en la computadora
pkgs_curso %in% installed.packages()
!TRUE
!FALSE
pkgs_miss <- pkgs_curso[!(pkgs_curso %in% installed.packages())]
pkgs_miss
pkgs_miss <- pkgs_curso[!(pkgs_curso %in% installed.packages())]
if(length(pkgs_miss)>0L)
install.packages(pkgs_miss, repos = "https://cloud.r-project.org/")
if(length(pkgs_miss)>0L){
install.packages(pkgs_miss, repos = "https://cloud.r-project.org/")
}else {
cat("Ya tienes todo")
}
pkgs_miss <- pkgs_curso[!(pkgs_curso %in% installed.packages())]
if(length(pkgs_miss)>0){
install.packages(pkgs_miss, repos = "https://cloud.r-project.org/")
}else {
cat("Ya tienes todo")
}
length(pkgs_miss)
url <- "https://cran.r-project.org/src/contrib/Archive/ecospat/ecospat_2.1.0.tar.gz"
install.packages(url,repos=NULL,type="source")
paquetes <- c("ape","gbm")
install.packages(paquetes)
install.packages(url,repos=NULL,type="source")
if(length(pkgs_miss)>0){
install.packages(pkgs_miss, repos = "https://cloud.r-project.org/")
}
# Intalacion de paquetes que no estan en CRAN
rm(list=ls())
setwd("C:/Users/l916o895/Dropbox/TeoriadeBAM")
pam1 <- rio::import("IUCN_Mammals_NA.csv")
mat=as.matrix(pam1[,-c(1:3)])
j=which(colSums(mat)>0)
mat2=mat[,j]
i=which(rowSums(mat2)>0)
mat3=mat2[i,]
xys <- as.matrix(pam1[i,2:3])
library(bam)
t1 <- system.time({
rdiv <- bam::diversity_range_analysis(pam = mat3,xy_mat = xys,
niter = 500,return_null_dfield = TRUE,
parallel = TRUE,
n_cores = 4)
})
t1 # tiempo en el que corrio las 500 simulaciones
# Graficos de diversity range (mapa)
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
# El diagrama de Blitzi
x11()
bam::plot(rdiv,plot_type="diversity_range")
x11()
bam::plot(rdiv,plot_type="diversity_range")
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
dim(xy_mat)
dim(xys)
bam::plot
showMethods("plot")
library(bam)
install.packages(c("countrycode", "gapminder"))
install.packages("flexdashboard")
install.packages("d3scatter")
install.packages("scatterD3")
devtools::install_github("jcheng5/d3scatter")
rm(list=ls())
setwd("C:/Users/l916o895/Dropbox/TeoriadeBAM")
pam1 <- rio::import("IUCN_Mammals_NA.csv")
mat=as.matrix(pam1[,-c(1:3)])
j=which(colSums(mat)>0)
mat2=mat[,j]
i=which(rowSums(mat2)>0)
mat3=mat2[i,]
xys <- as.matrix(pam1[i,2:3])
library(bam)
t1 <- system.time({
rdiv <- bam::diversity_range_analysis(pam = mat3,xy_mat = xys,
niter = 500,return_null_dfield = TRUE,
parallel = TRUE,
n_cores = 4)
})
t1 # tiempo en el que corrio las 500 simulaciones
# Graficos de diversity range (mapa)
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
showMethods("plot")
# El diagrama de Blitzi
x11()
bam::plot(rdiv,plot_type="diversity_range")
library(bam)
library(bam)
# Instalar bam usando devtools (lo siento doc)
#devtools::install_github("luismurao/bam")
# Use opcion 3 para evitar que reinstale lo que ya tiene
3
# Ahora si el codigo del analisis
rm(list=ls())
setwd("C:/Users/l916o895/Dropbox/TeoriadeBAM")
pam1 <- rio::import("IUCN_Mammals_NA.csv")
mat=as.matrix(pam1[,-c(1:3)])
j=which(colSums(mat)>0)
mat2=mat[,j]
i=which(rowSums(mat2)>0)
mat3=mat2[i,]
xys <- as.matrix(pam1[i,2:3])
library(bam)
t1 <- system.time({
rdiv <- bam::diversity_range_analysis(pam = mat3,xy_mat = xys,
niter = 500,return_null_dfield = TRUE,
parallel = TRUE,
n_cores = 4)
})
t1 # tiempo en el que corrio las 500 simulaciones
# Graficos de diversity range (mapa)
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
showMethods("plot")
# El diagrama de Blitzi
x11()
bam::plot(rdiv,plot_type="diversity_range")
rdiv
shared_iris <- SharedData$new(cbind(rdiv@alpha,rdiv@dispersion_field))
library(crosstalk)
shared_iris <- SharedData$new(cbind(rdiv@alpha,rdiv@dispersion_field))
shared_iris
shared_iris <- SharedData$new(data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field))
diversity <- SharedData$new(data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field))
diversity <- SharedData$new(data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates))
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates)
div1
diversity <- SharedData$new(div1)
rdiv@diversity_range_colors
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=rdiv@diversity_range_colors)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width="100%", height=300),
d3scatter(diversity, ~x, ~y, ~col, width="100%", height=300)
)
library(crosstalk)
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=rdiv@diversity_range_colors)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width="100%", height=300),
d3scatter(diversity, ~x, ~y, ~col, width="100%", height=300)
)
library(d3scatter)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width="100%", height=300),
d3scatter(diversity, ~x, ~y, ~col, width="100%", height=300)
)
div1
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width="100%", height=300),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width="100%", height=300)
)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,color = unique(~col)),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,color = ~col),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
?d3scatter
rdiv@diversity_range_colors
cols <- rdiv@diversity_range_colors
cols <- as.factor(rdiv@diversity_range_colors)
levels(cols) <- c("Random","HE/LR",
"HE/IR","LE/LR",
"HE/HR","LE/IR",
"LE/HR")
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=rdiv@diversity_range_colors)
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=cols)
library(d3scatter)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
cols <- as.character(cols)
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=cols)
library(d3scatter)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
cols <- as.factor(rdiv@diversity_range_colors)
levels(cols) <- c("Random","HE/LR",
"HE/IR","LE/LR",
"HE/HR","LE/IR",
"LE/HR")
#cols <- as.character(cols)
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=cols)
library(d3scatter)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
showMethods("plot")
library(d3scatter)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=1200, height=1200)
)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=1200, height=1200,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=900, height=900)
)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=900, height=900,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=900, height=900)
)
cols <- as.factor(rdiv@diversity_range_colors)
levels(cols) <- c("Random","LE/HR",
"HE/IR","LE/LR",
"HE/HR","LE/IR",
"HE/LR")
#cols <- as.character(cols)
div1 <- data.frame(alpha=rdiv@alpha,dfield=rdiv@dispersion_field,rdiv@xy_coordinates,
col=cols)
library(d3scatter)
diversity <- SharedData$new(div1)
bscols(
d3scatter(diversity, ~alpha, ~dfield, ~col, width=900, height=900,),
d3scatter(diversity, ~Longitude, ~Latitude, ~col, width=900, height=900)
)
t1
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
showMethods("plot")
pam1 <- rio::import("IUCN_Mammals_NA.csv")
mat=as.matrix(pam1[,-c(1:3)])
j=which(colSums(mat)>0)
mat2=mat[,j]
i=which(rowSums(mat2)>0)
mat3=mat2[i,]
xys <- as.matrix(pam1[i,2:3])
t1 <- system.time({
rdiv <- bam::diversity_range_analysis(pam = mat3,xy_mat = xys,
niter = 500,return_null_dfield = TRUE,
parallel = TRUE,
n_cores = 4)
})
t1 # tiempo en el que corrio las 500 simulaciones
# Graficos de diversity range (mapa)
x11()
bam::plot(rdiv,plot_type="diversity_range_map",asp=1)
showMethods("plot")
str(rdiv)
names(rdiv)
rdiv
rm(list=ls())
mem <- 5000*1024^2
options(future.globals.maxSize= mem)
setwd("C:/Users/l916o895/Dropbox/TeoriadeBAM/bam_stable/bam/")
#m10ma <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/PAMpolinizadores5km.csv")
#pam <-  as.matrix(m10ma[,-c((1:3))])
m10ma <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/PAMapodiformes10min.csv")
elimi <- -c(1:3,seq(ncol(m10ma)-2,ncol(m10ma)))
pam <- as.matrix(m10ma[,elimi])
xy_mat <- m10ma[,1:2]
#distfield_rand <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/dispersion_field_null.csv")
#distfield_rand <- data.
m10ma
#m10ma <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/PAMpolinizadores5km.csv")
#pam <-  as.matrix(m10ma[,-c((1:3))])
m10ma <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/PAMapodiformes10min.csv")
elimi <- -c(1:3,seq(ncol(m10ma)-2,ncol(m10ma)))
pam <- as.matrix(m10ma[,elimi])
xy_mat <- m10ma[,1:2]
pam
xy_mat <- m10ma[,1:2]
#distfield_rand <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/dispersion_field_null.csv")
#distfield_rand <- data.matrix(distfield_rand)
#raster_templete <- raster::raster("C:/Users/l916o895/Dropbox/random_matrix//bio4_5min.tif")*0
raster_templete <- raster::raster("C:/Users/l916o895/Dropbox/random_matrix//polinizadores.tif")
#distfield_rand <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/dispersion_field_null.csv")
#distfield_rand <- data.matrix(distfield_rand)
#raster_templete <- raster::raster("C:/Users/l916o895/Dropbox/random_matrix//bio4_5min.tif")*0
raster_templete <- raster::raster("C:/Users/l916o895/Dropbox/random_matrix//bio4_10min.tif")
library(bam)
t1 <- system.time({
rdiv <- bam::diversity_range_analysis(pam = pam,xy_mat = xy_mat,
raster_templete =raster_templete ,
niter = 500,return_null_dfield = TRUE,parallel = TRUE,
n_cores = 10)
})
t1
bam::plot(rdiv,plot_type="diversity_range")
bam::plot(rdiv,plot_type="diversity_range_map")
plot(rdiv,plot_type="diversity_range",cex=1,pch=19,legend_position="bottomleft")
plot(rdiv,plot_type="diversity_range_map",cex=1,pch=19,legend_position="bottomleft")
x11()
bam::plot(rdiv,plot_type="diversity_range")
plot(rdiv@diversity_range_raster,col=cols)
plot(rdiv@diversity_range_raster)
plot(rdiv@diversity_range_raster)
x11()
plot(rdiv@diversity_range_raster)
x11()
plot(rdiv@dispersion_field_raster)
rdiv
#pam <-  as.matrix(m10ma[,-c((1:3))])
m10ma <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/PAMpolinizadores10min.csv")
elimi <- -c(1:3,seq(ncol(m10ma)-2,ncol(m10ma)))
pam <- as.matrix(m10ma[,elimi])
xy_mat <- m10ma[,1:2]
#distfield_rand <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/dispersion_field_null.csv")
#distfield_rand <- data.matrix(distfield_rand)
#raster_templete <- raster::raster("C:/Users/l916o895/Dropbox/random_matrix//bio4_5min.tif")*0
raster_templete <- raster::raster("C:/Users/l916o895/Dropbox/random_matrix//bio4_10min.tif")
library(bam)
t1 <- system.time({
rdiv <- bam::diversity_range_analysis(pam = pam,xy_mat = xy_mat,
raster_templete =raster_templete ,
niter = 500,return_null_dfield = TRUE,parallel = TRUE,
n_cores = 10)
})
x11()
bam::plot(rdiv,plot_type="diversity_range")
rdiv@diversity_range_raster
x11()
bam::plot(rdiv,plot_type="diversity_range_map")
x11()
bam::plot(rdiv,plot_type="diversity_range_map",legend_position="topright")
x11()
.libPaths()
bam::diversity_range_analysis
?plot
install.packages("shinydashboard")
bam::plot(rdiv,plot_type="diversity_range_map")
file.edit("~/.Renviron")
install.packages("shinydashboard")
install.packages("shinydashboard")
#distfield_rand <- rio::import("C:/Users/l916o895/Dropbox/random_matrix/dispersion_field_null.csv")
install.packages("Rcpp")
install.packages("Rcpp")
file.edit("~/.Renviron")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("raster")
install.packages("Rcpp")
install.packages("devtools")
devtools::install_github("luismurao/bam")
install.packages("Rcpp")
install.packages("Rcpp",type="source")
install.packages("Rcpp",type="source")
install.packages("Rcpp",type="source")
install.packages("RcppArmadillo",type="source")
devtools::install_github("luismurao/bam")
?bam
install.packages("GISTools")
?GISTools::choropleth()
# Read in map data and compute a rate for mapping
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
library(GISTools)
# Read in map data and compute a rate for mapping
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
sids.rate=10000*sids$SID74/sids$BIR74
# Create the shading scheme,  plot a choropleth map
shades = auto.shading(sids.rate,cols=brewer.pal(5,'Blues'))
choropleth(sids,sids.rate,shades)
library(GISTools)
# Read in map data and compute a rate for mapping
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
sids.rate=10000*sids$SID74/sids$BIR74
# Create the shading scheme,  plot a choropleth map
shades = auto.shading(sids.rate,cols=brewer.pal(5,'Blues'))
choropleth(sids,sids.rate,shades)
# library(GISTools)
data(georgia)
# select the first element
appling <- georgia.polys[[1]]
# set the plot extent
plot(appling, asp=1, type='n', xlab="Easting", ylab="Northing")
# plot the selected features with hatching
polygon(appling, density=14, angle=135)
appling
georgia.polys
data(newhaven)
ls()
plot(blocks)
par(mar = c(0,0,0,0))
plot(roads, col="red")
plot(blocks, add = T)
roads
data(newhaven)
ls()
plot(blocks)
par(mar = c(0,0,0,0))
plot(roads, col="red")
plot(blocks, add = T)
data(georgia)
georgia_sf <- st_as_sf(georgia)
library(sf)
install.packages("sf")
data(georgia)
georgia_sf <- st_as_sf(georgia)
library(sf)
data(georgia)
georgia_sf <- st_as_sf(georgia)
library(tmap)
install.packages("tmap")
library(tmap)
qtm(georgia, fill = "red", style = "natural")
qtm(georgia_sf, fill="MedInc", text="Name", text.size=0.5,
format="World_wide", style="classic",
text.root=5, fill.title="Median Income")
380*1.96*0.05*.95
n1=n2=50
N1 = 380
N2 = 200
MU1 = 420.4
MU2= 392.5
n1=n2=50
N1 = 380
N2 = 200
mu1 = 420.4
mu2= 392.5
n1=n2=50
sigma1 = 55.7
sigma2 = 87.9
sigma1prom = sigma1/sqrt(n1) * sqrt((N-n)/(N-1))
sigma1prom = sigma1/sqrt(n1) * sqrt((N1-n1)/(N1-1))
sigma1prom
sigma2prom = sigma2/sqrt(n2) * sqrt((N2-n2)/(N2-1))
sigma2prom
sigma1prom^2
sigma1prom^2 / n1 +sigma2^2 / n2
sqrt(sigma1prom^2 / n1 +sigma2^2 / n2)
sigma1prom^2 / n1
sqrt((sigma1prom^2 / n1 )+ (sigma2^2 / n2))
sqrt((sigma1prom^2 / n1 ) + (sigma2^2 / n2))
1.96*sqrt((sigma1prom^2 / n1 ) + (sigma2^2 / n2))
term2 =1.96*sqrt((sigma1prom^2 / n1 ) + (sigma2^2 / n2))
term1 = mu1- m2
mu1 = 420.4
mu2= 392.5
n1=n2=50
sigma1 = 55.7
sigma2 = 87.9
sigma1prom = sigma1/sqrt(n1) * sqrt((N1-n1)/(N1-1))
sigma2prom = sigma2/sqrt(n2) * sqrt((N2-n2)/(N2-1))
term1 = mu1- m2
term2 =1.96*sqrt((sigma1prom^2 / n1 ) + (sigma2^2 / n2))
term1 = mu1- mu2
term2 =1.96*sqrt((sigma1prom^2 / n1 ) + (sigma2^2 / n2))
term1 + mu1
term1 + term2
term1 - term2
sigma1prom
plot(blocks)
par(mar = c(0,0,0,0))
plot(roads, col="red")
plot(blocks, add = T)
library(tmap)
qtm(georgia, fill = "red", style = "natural")
qtm(georgia_sf, fill="MedInc", text="Name", text.size=0.5,
format="World_wide", style="classic",
text.root=5, fill.title="Median Income")
library(GISTools)
# Read in map data and compute a rate for mapping
sids <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
sids.rate=10000*sids$SID74/sids$BIR74
# Create the shading scheme,  plot a choropleth map
shades = auto.shading(sids.rate,cols=brewer.pal(5,'Blues'))
choropleth(sids,sids.rate,shades)
choropleth
devtools::install_github("luismurao/ntbox")
library(ntbox)
run_ntbox()
run_ntbox()
ntbox::run_ntbox()
devtools::install_github("luismurao/ntbox")
ntbox::run_ntbox()
library(bam)
timesTwo(42)
timesTwo(42)
Rcpp::sourceCpp('C:/Users/l916o895/Dropbox/TeoriadeBAM/preuba_cpp.cpp')
Rcpp::sourceCpp
Rcpp::sourceCpp('C:/Users/l916o895/Dropbox/TeoriadeBAM/preuba_cpp.cpp')
