csd_plot <- csd_estimate(model,
dispersal_steps=c(2,4,8,16,32,45),
plot=TRUE)
csd_plot$``
csd_plot$plot_data
csd_plot$``
library(bam)
csd_plot <- csd_estimate(model,
dispersal_steps=c(2,4,8,16,32,45),
plot=TRUE)
csd_plot$plot
csd_plot$plot
csd_plot$plot
dispersal_steps=c(2,4,8,16,32,64)
x=1
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x])
x=4
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning",dispersal_steps[1:x])
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning ",
paste(dispersal_steps[1:x]))
paste(dispersal_steps[1:x])
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning ",
paste(dispersal_steps[1:x],collapse = " "))
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning ",
paste(dispersal_steps[1:(x-1)],collapse = " "))
paste
library(bam)
model
dispersal_steps=c(2,1000)
dispersal_steps=c(2,300)
if(class(model) == "raster"){
model <- bam::model2sparse(model)
}
dispersal_steps <- sort(dispersal_steps)
ds <- seq_along(dispersal_steps)
pb <- utils::txtProgressBar(min = 0, max = max(ds), style = 3)
testworks <- TRUE
csd <- ds %>% purrr::map(function(x){
if(testworks){
bclust <- try({
r <- bam::bam_clusters(model,ngbs = dispersal_steps[x])
})
if(class(bclust) != "csd"){
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning ",
paste(dispersal_steps[1:(x-1)],collapse = " "))
testworks <- FALSE
}
}
utils::setTxtProgressBar(pb, x)
return(bclust)
})
library(magrittr)
csd <- ds %>% purrr::map(function(x){
if(testworks){
bclust <- try({
r <- bam::bam_clusters(model,ngbs = dispersal_steps[x])
})
if(class(bclust) != "csd"){
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning ",
paste(dispersal_steps[1:(x-1)],collapse = " "))
testworks <- FALSE
}
}
utils::setTxtProgressBar(pb, x)
return(bclust)
})
csd
ndisp <- length(csd)
d_all <- 1:ndisp %>% purrr::map_df(function(x){
if(class(csd[[x]]) == "csd"){
d1 <- data.frame(csd[[x]]@connections,
d=dispersal_steps[x])
return(d1)
}
})
d_all
#d_clust <- d_all %>%
#  dplyr::group_by(d) %>%
#  dplyr::summarise(n_clusters=max(clusterID))
d <- NULL; clusterID <- NULL; nclust <-NULL
d_clust <- d_all  %>% dplyr::group_by(d,clusterID) %>%
dplyr::summarise(nclust=dplyr::n()) %>% dplyr::group_by(d) %>%
dplyr::summarise(Clusters=max(clusterID),
mean_area=mean(nclust))
d_clus
d_clust
s1 <- as.factor(d_clust$mean_area)
nlevs <- length(unique(d_clust$mean_area))
levels(s1) <- seq(1,2,length.out = nlevs)
#data.frame(f1=s1,
#           f2=d_clust$mean_area)
sizes <- as.numeric(as.character(s1))
plot(d_clust$d,d_clust$Clusters,frame=TRUE,
type="l",pch=19,lwd=2,cex=2,
xlab="Neighbors",ylab="Clusters",
cex.lab=1.25, cex.axis=1.25)
graphics::points(d_clust$d,d_clust$Clusters,pch=19,
cex=sizes*1.5,col="brown")
graphics::legend("topright",
legend = paste(round(d_clust$mean_area)),
col = "brown",
pch = 19,
bty = "n",
pt.cex = sizes,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
p <- grDevices::recordPlot()
#graphics::plot.new() ## clean up device
#
names(csd) <- paste0("dispersal_step:_",dispersal_steps)
csd <- list(csd=csd,plot_data=d_clust,plot=p)
csd
plot
library(bam)
warning("There is not enough memory to calculate",
"the adjacency matrix for dispersal step =",
dispersal_steps[x],"\n returning ",
paste(dispersal_steps[1:(x-1)],collapse = " "))
(x-1)
?bam
?bam_clusters
library(bam)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model >= 7
sparse_mod <- bam::model2sparse(model = model_bin)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 7
sparse_mod <- bam::model2sparse(model = model_bin)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
clusterin <- bam_clusters(model=model,ngbs=1,plot_model=T)
model=sparse_mod
if(class(model) == "RasterLayer"){
msparse <- bam::model2sparse(model)
}
if(class(model) == "RasterLayer"){
msparse <- bam::model2sparse(model)
}
else{
msparse <- model
}
#if(c
adj_msp <- bam::adj_mat(msparse,ngbs)
sparse_mod <- bam::model2sparse(model = model_bin)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
model=sparse_mod
if(class(model) == "RasterLayer"){
msparse <- bam::model2sparse(model)
}else{
msparse <- model
}
adj_msp <- bam::adj_mat(msparse,ngbs)
ngbs=2
adj_msp <- bam::adj_mat(msparse,ngbs)
ama <-   msparse@sparse_model %*% adj_msp@adj_matrix %*%  msparse@sparse_model
ids_p <- which(Matrix::rowSums(ama)>0)
ama <- ama[ids_p ,ids_p]
colnames(ama) <- paste0(ids_p)
rownames(ama) <-  paste0(ids_p)
ama <- as(ama, "dgTMatrix")
rgs <- ama@i + 1L
cls <- ama@j + 1L
vals <- ama@x
my_df <- data.frame(
rows = factor(ama@Dimnames[[1]][rgs],
levels=unique(ama@Dimnames[[1]])),
cols = factor(ama@Dimnames[[2]][cls],
levels=unique(ama@Dimnames[[2]])),
value = vals)
net <- igraph::graph.data.frame(my_df, directed = F)
cl <- igraph::clusters(net)
to_find <- seq_along(cl$csize)[cl$csize > 1]
clusterDF <- to_find %>%
purrr::map_df(function(x){
cellID <- as.numeric(igraph::V(net)$name[cl$membership %in% x])
dcl <- data.frame(cluster=x,
cluster_size = cl$csize[x],
cellID= cellID)
return(dcl)
})
paleta <- grDevices::rainbow(length(to_find)*500)
raster_clust <- model
df_clust1 <- data.frame(msparse@coordinates[clusterDF$cellID,],
clusterID = clusterDF$cluster,
cluster_size=clusterDF$cluster_size)
raster_clust <- msparse@bin_model
df_clust1 <- data.frame(msparse@coordinates[clusterDF$cellID,],
clusterID = clusterDF$cluster,
cluster_size=clusterDF$cluster_size)
clusterDF
adj_msp <- bam::adj_mat(msparse,ngbs)
ama <-   msparse@sparse_model %*% adj_msp@adj_matrix %*%  msparse@sparse_model
ids_p <- which(Matrix::rowSums(ama)>0)
ama <- ama[ids_p ,ids_p]
colnames(ama) <- paste0(ids_p)
rownames(ama) <-  paste0(ids_p)
ama <- as(ama, "dgTMatrix")
rgs <- ama@i + 1L
cls <- ama@j + 1L
vals <- ama@x
my_df <- data.frame(
rows = factor(ama@Dimnames[[1]][rgs],
levels=unique(ama@Dimnames[[1]])),
cols = factor(ama@Dimnames[[2]][cls],
levels=unique(ama@Dimnames[[2]])),
value = vals)
my_df
adj_msp <- bam::adj_mat(msparse,ngbs)
ama <-   msparse@sparse_model %*% adj_msp@adj_matrix %*%  msparse@sparse_model
msparse@sparse_model
adj_msp <- bam::adj_mat(msparse,ngbs)
ama <-   msparse@sparse_model %*% adj_msp@adj_matrix %*%  msparse@sparse_model
ids_p <- which(Matrix::rowSums(ama)>0)
ids_p
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 7
sparse_mod <- bam::model2sparse(model = model_bin)
adj_mod <- adj_mat(sparse_mod,ngbs=1,eigen_sys = T)
adj_mod
model_eig <- model
model_eig[sparse_mod@cellIDs] <- abs(adj_mod@eigen_vec)
raster::plot(model_eig)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
plot(sparse_mod@bin_model)
raster::plot(sparse_mod@bin_model)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 7
plot(model_bin)
raster::plot(model_bin)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 0.7
sparse_mod <- bam::model2sparse(model = model_bin)
adj_mod <- adj_mat(sparse_mod,ngbs=1,eigen_sys = T)
adj_mod
model_eig <- model
model_eig[sparse_mod@cellIDs] <- abs(adj_mod@eigen_vec)
raster::plot(model_eig)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
model=sparse_mod
model=sparse_mod
raster::plot(sparse_mod@bin_model)
if(class(model) == "RasterLayer"){
msparse <- bam::model2sparse(model)
}else{
msparse <- model
}
adj_msp <- bam::adj_mat(msparse,ngbs)
ama <-   msparse@sparse_model %*% adj_msp@adj_matrix %*%  msparse@sparse_model
ids_p <- which(Matrix::rowSums(ama)>0)
ama <- ama[ids_p ,ids_p]
colnames(ama) <- paste0(ids_p)
rownames(ama) <-  paste0(ids_p)
ama <- as(ama, "dgTMatrix")
rgs <- ama@i + 1L
cls <- ama@j + 1L
vals <- ama@x
my_df <- data.frame(
rows = factor(ama@Dimnames[[1]][rgs],
levels=unique(ama@Dimnames[[1]])),
cols = factor(ama@Dimnames[[2]][cls],
levels=unique(ama@Dimnames[[2]])),
value = vals)
net <- igraph::graph.data.frame(my_df, directed = F)
cl <- igraph::clusters(net)
to_find <- seq_along(cl$csize)[cl$csize > 1]
clusterDF <- to_find %>%
purrr::map_df(function(x){
cellID <- as.numeric(igraph::V(net)$name[cl$membership %in% x])
dcl <- data.frame(cluster=x,
cluster_size = cl$csize[x],
cellID= cellID)
return(dcl)
})
paleta <- grDevices::rainbow(length(to_find)*500)
raster_clust <- msparse@bin_model
df_clust1 <- data.frame(msparse@coordinates[clusterDF$cellID,],
clusterID = clusterDF$cluster,
cluster_size=clusterDF$cluster_size)
raster_clust[msparse@cellIDs[clusterDF$cellID]] <- clusterDF$cluster
cluster_map <- paste("cluster: ",as.character(clusterDF$cluster),
"<br>","c_size: ",clusterDF$cluster_size,
#"<br>","p_ID: ",clusterDF$cellID,
"<br>","Longitude: ",round(df_clust1$x,4),
"<br>","Latitude: ", round(df_clust1$y,4))
ids_cols <- floor(seq(1,length(paleta),
length.out = max(clusterDF$cluster)))
cluster_color <- paleta[ids_cols]
cluster_color <- sample(cluster_color)
cols <- cluster_color[clusterDF$cluster]
m <- leaflet::leaflet(df_clust1) %>% leaflet::addTiles()
if(plot_model){
#nw <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
#m2 <- raster::projectRaster(model, crs=nw)
#m2 <- leaflet::projectRasterForLeaflet(model,method = "bilinear")
mod <- round(model)
mod <- raster::as.factor(mod)
m <- m %>%
leaflet::addRasterImage( mod,
colors = c("gray100","blue"),
opacity = 0.5)
}
m <- m %>% leaflet::addCircleMarkers(lng = ~x,
lat = ~y,
popup = cluster_map,radius = 0.1,
color = cols,opacity = 1)
csd_res <- csd(connections = df_clust1,
interactive_map = m,
raster_map = raster_clust)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bam)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 0.7
sparse_mod <- bam::model2sparse(model = model_bin)
sparse_mod
# Adjacency matrix from a niche model
adj_mod <- adj_mat(sparse_mod,ngbs=1,eigen_sys = T)
adj_mod
model_eig <- model
model_eig[sparse_mod@cellIDs] <- abs(adj_mod@eigen_vec)
raster::plot(model_eig)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
raster_clust <- msparse@bin_model
raster_clust
df_clust1 <- data.frame(msparse@coordinates[clusterDF$cellID,],
clusterID = clusterDF$cluster,
cluster_size=clusterDF$cluster_size)
raster_clust[msparse@cellIDs[clusterDF$cellID]] <- clusterDF$cluster
clusterDF$cluster
rm9list=ls()
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bam)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 0.7
sparse_mod <- bam::model2sparse(model = model_bin)
sparse_mod
# Adjacency matrix from a niche model
adj_mod <- adj_mat(sparse_mod,ngbs=1,eigen_sys = T)
adj_mod
model_eig <- model
model_eig[sparse_mod@cellIDs] <- abs(adj_mod@eigen_vec)
raster::plot(model_eig)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
clusterin@interactive_map
model=sparse_mod
ngbs=1
plot_model=T
msparse <- model
adj_msp <- bam::adj_mat(msparse,ngbs)
ama <-   msparse@sparse_model %*% adj_msp@adj_matrix %*%  msparse@sparse_model
ids_p <- which(Matrix::rowSums(ama)>0)
ama <- ama[ids_p ,ids_p]
colnames(ama) <- paste0(ids_p)
rownames(ama) <-  paste0(ids_p)
ama <- as(ama, "dgTMatrix")
rgs <- ama@i + 1L
cls <- ama@j + 1L
vals <- ama@x
my_df <- data.frame(
rows = factor(ama@Dimnames[[1]][rgs],
levels=unique(ama@Dimnames[[1]])),
cols = factor(ama@Dimnames[[2]][cls],
levels=unique(ama@Dimnames[[2]])),
value = vals)
net <- igraph::graph.data.frame(my_df, directed = F)
cl <- igraph::clusters(net)
to_find <- seq_along(cl$csize)[cl$csize > 1]
clusterDF <- to_find %>%
purrr::map_df(function(x){
cellID <- as.numeric(igraph::V(net)$name[cl$membership %in% x])
dcl <- data.frame(cluster=x,
cluster_size = cl$csize[x],
cellID= cellID)
return(dcl)
})
paleta <- grDevices::rainbow(length(to_find)*500)
raster_clust <- msparse@bin_model
df_clust1 <- data.frame(msparse@coordinates[clusterDF$cellID,],
clusterID = clusterDF$cluster,
cluster_size=clusterDF$cluster_size)
raster_clust[msparse@cellIDs[clusterDF$cellID]] <- clusterDF$cluster
cluster_map <- paste("cluster: ",as.character(clusterDF$cluster),
"<br>","c_size: ",clusterDF$cluster_size,
#"<br>","p_ID: ",clusterDF$cellID,
"<br>","Longitude: ",round(df_clust1$x,4),
"<br>","Latitude: ", round(df_clust1$y,4))
ids_cols <- floor(seq(1,length(paleta),
length.out = max(clusterDF$cluster)))
cluster_color <- paleta[ids_cols]
cluster_color <- sample(cluster_color)
cols <- cluster_color[clusterDF$cluster]
m <- leaflet::leaflet(df_clust1) %>% leaflet::addTiles()
if(plot_model){
#nw <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
#m2 <- raster::projectRaster(model, crs=nw)
#m2 <- leaflet::projectRasterForLeaflet(model,method = "bilinear")
mod <- round(model)
mod <- raster::as.factor(mod)
m <- m %>%
leaflet::addRasterImage( mod,
colors = c("gray100","blue"),
opacity = 0.5)
}
plot_model
mod <- round(msparse@bin_model)
mod <- raster::as.factor(mod)
m <- m %>%
leaflet::addRasterImage( mod,
colors = c("gray100","blue"),
opacity = 0.5)
library(bam)
library(bam)
clusterin <- bam_clusters(model=sparse_mod,ngbs=1,plot_model=T)
library(bam)
library(webshot)
library(bam)
library(bam)
library(bam)
install.packages("rmarkdown")
library(bam)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bam)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
# binary model
model_bin <- model > 0.7
sparse_mod <- bam::model2sparse(model = model_bin)
sparse_mod
# Adjacency matrix from a niche model
adj_mod <- adj_mat(sparse_mod,ngbs=1,eigen_sys = T)
adj_mod
model_eig <- model
model_eig[sparse_mod@cellIDs] <- abs(adj_mod@eigen_vec)
raster::plot(model_eig)
clusterin <- bam_clusters(model=sparse_mod,
ngbs=1,plot_model=FALSE)
clusterin@interactive_map
clusterin <- bam_clusters(model=sparse_mod,
ngbs=1,plot_model=FALSE)
clusterin@interactive_map
clusterin
clusterin
clusterin <- bam_clusters(model=sparse_mod,
ngbs=1,plot_model=FALSE)
clusterin@interactive_map
raster::plot(clusterin@interactive_map)
clusterin
library(bam)
?bam
library(bam)
csd_plot <- csd_estimate(sparse_mod,
dispersal_steps=c(2,4,8,16,32,45),
plot=TRUE)
csd_plot <- csd_estimate(sparse_mod,
dispersal_steps=c(2,4,8,16,32,45))
library(bam)
library(bam)
library(bam)
library(bam)
library(bam)
model_path <- system.file("extdata/Lepus_californicus_cont.tif",
package = "bam")
model <- raster::raster(model_path)
sparse_mod <- bam::model2sparse(model,threshold=0.05)
rand_disp=c(1,2,3,4,5,6)
